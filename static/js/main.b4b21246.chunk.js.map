{"version":3,"sources":["components/TodoEntry.js","components/TodoItem.js","components/TodoItems.js","components/TodoMenu.js","App.js","serviceWorker.js","stores/TodoModel.js","stores/TodoStore.js","index.js"],"names":["TodoEntry","state","value","handleKeyDown","event","keyCode","preventDefault","_this","props","todoStore","addTodo","setState","_this2","this","react_default","a","createElement","className","onChange","target","onKeyDown","type","placeholder","Component","inject","observer","TodoItem","onToggle","todo","toggle","console","log","id","closeLable","removeTodo","completed","checked","title","onClick","TodoItems","List","Listposition","todos","length","filter","map","components_TodoItem","key","TodoMenu","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","changeListA","bind","assertThisInitialized","changeListT","changeListD","ClearC","removeAllCompletedTodo","concat","App","components_TodoEntry","components_TodoItems","components_TodoMenu","Boolean","window","location","hostname","match","TodoModel","store","decorate","observable","action","TodoStore","lastID","numOfItems","push","ID","num","ReactDOM","render","index_module","todoModel","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b4b21246.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {observer,inject} from 'mobx-react';\r\n\r\nclass TodoEntry extends Component {\r\n  state = {\r\n    value: ''\r\n  }\r\n  handleKeyDown= event =>{\r\n    if(event.keyCode!==13){\r\n      return;\r\n    }\r\n    event.preventDefault()\r\n    this.props.todoStore.addTodo(this.state.value)\r\n    this.setState({\r\n      value: ''\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <header className=\"header\">\r\n        <h1>Todo</h1>\r\n        <input\r\n          value={this.state.value}\r\n          onChange={event=>this.setState({value: event.target.value})}\r\n          onKeyDown={\r\n            event=> this.handleKeyDown(event)\r\n          }\r\n          type=\"text\"\r\n          className=\"new-todo\"\r\n          placeholder=\"What needs to be done?\"\r\n        />\r\n      </header>\r\n    );\r\n  }\r\n}\r\nexport default inject('todoStore')(observer(TodoEntry));\r\n\r\n","import React, { Component } from \"react\";\r\nimport {observer,inject} from 'mobx-react';\r\n\r\nclass TodoItem extends Component {\r\n    onToggle=()=>{\r\n        this.props.todo.toggle()\r\n        console.log(this.props.todo.id)\r\n    }\r\n    closeLable=()=>{\r\n        this.props.todoStore.removeTodo(this.props.todo.id)\r\n    }\r\n  render() {\r\n      const { todo } = this.props\r\n    return (\r\n        \r\n          <li  className={todo.completed ? 'completed' : ''}>\r\n            <div className=\"view\">\r\n              <input\r\n                onChange={this.onToggle}\r\n                type=\"checkbox\"\r\n                className=\"toggle\" \r\n                value=\"on\" \r\n                checked={todo.completed}/>\r\n              <label>{todo.title}</label>\r\n              <button onClick={this.closeLable} id={todo.id}  className=\"destry\">x</button>\r\n            </div>\r\n          </li>\r\n        \r\n    );\r\n  }\r\n}\r\nexport default inject('todoStore')(observer(TodoItem));\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport { observer, inject } from \"mobx-react\";\r\n\r\nclass TodoItems extends Component {\r\n  \r\n  List = [];\r\n  render() {\r\n    if (this.props.todoStore.Listposition === 0) {\r\n      this.List = this.props.todoStore.todos;\r\n      console.log(this.List.length)\r\n    \r\n    }\r\n    if (this.props.todoStore.Listposition === 1) {\r\n      this.List = this.props.todoStore.todos.filter(a => a.completed === false);\r\n    }\r\n    if (this.props.todoStore.Listposition === 2) {\r\n      this.List = this.props.todoStore.todos.filter(a => a.completed === true);\r\n    }\r\n    \r\n    return (\r\n      <section className=\"main\">\r\n        <ul className=\"todo-list\">\r\n          {\r\n            this.List.map(todo => {\r\n            return <TodoItem todo={todo} key={todo.id} />;\r\n          })}\r\n        </ul>\r\n      </section>\r\n    );\r\n  }\r\n}\r\nexport default inject(\"todoStore\")(observer(TodoItems));\r\n","import React, { Component } from \"react\";\r\nimport {observer,inject} from 'mobx-react';\r\n\r\n\r\nclass TodoMenu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n          this.changeListA = this.changeListA.bind(this);\r\n          this.changeListT = this.changeListT.bind(this);\r\n          this.changeListD = this.changeListD.bind(this);\r\n          this.ClearC = this.ClearC.bind(this);\r\n      }\r\n    changeListA(){\r\n        this.props.todoStore.Listposition = 0;\r\n    }\r\n    changeListT(){\r\n        this.props.todoStore.Listposition = 1;\r\n    }\r\n    changeListD(){\r\n        this.props.todoStore.Listposition = 2;\r\n    }\r\n    ClearC(){\r\n        this.props.todoStore.removeAllCompletedTodo();\r\n    }\r\n    List=[]\r\n  render() {\r\n    this.List = this.props.todoStore.todos.filter(a => a.completed === false);\r\n      \r\n    return (\r\n        \r\n          <div className=\"Menu\">\r\n            <div className=\"lengthItems\">{` ${this.List.length} items left`}</div>\r\n            <button onClick = {this.changeListA} className=\"BTall\">All</button>\r\n            <button onClick = {this.changeListT} className=\"BTtodo\">Todo</button>\r\n            <button onClick = {this.changeListD} className=\"BTdone\">Done</button>\r\n            <button onClick = {this.ClearC} className=\"BTclear\">clear completed</button>\r\n          </div>\r\n        \r\n    );\r\n  }\r\n}\r\nexport default inject('todoStore')(observer(TodoMenu));\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport {observer,inject} from 'mobx-react';\nimport TodoEntry from './components/TodoEntry'\nimport TodoItems from './components/TodoItems'\nimport TodoMenu from './components/TodoMenu'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"todoapp\" id=\"todoapp\">\n        <TodoEntry/>\n        <TodoItems/>\n        <TodoMenu />\n\n\n\n\n          {/* <img onClick={()=> this.props.store.changemsg()} src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            {this.props.store.s_item.msg}\n          </p>\n          <div>{this.props.store.s_item.time}</div>\n          <div>\n            <button onClick={()=> this.props.store.pauseClock()}>pause</button>     \n            <button onClick={()=> this.props.store.startClock()}>start</button>\n          </div> */}\n        \n      </div>\n    );\n  }\n}\n\nexport default inject('todoStore')(observer(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {observable,action,decorate} from 'mobx';\r\n\r\nexport default class TodoModel {\r\n    store\r\n    id \r\n    title\r\n    completed\r\n    \r\n    constructor( store, title, completed, id) {\r\n        this.title =title\r\n        this.completed = completed\r\n        this.id = id\r\n        this.store = store\r\n    }\r\n    \r\n\r\n    toggle(){\r\n        this.completed = !this.completed\r\n    }\r\n}\r\n\r\ndecorate(TodoModel,{title:observable,completed:observable,toggle:action})\r\n\r\n","import {observable,action,decorate} from 'mobx';\r\nimport TodoModel from './TodoModel';\r\n\r\nclass TodoStore {\r\n    todos =[]\r\n    lastID = 0\r\n    Listposition = 0\r\n    numOfItems = 0\r\n    \r\n    addTodo(title){\r\n        this.todos.push(new TodoModel(this ,title , false, this.lastID ++))\r\n    }\r\n    removeTodo(ID){\r\n        this.todos = this.todos.filter(a => a.id !== ID)\r\n    }\r\n    removeAllCompletedTodo(){\r\n        this.todos = this.todos.filter(a => a.completed !== true)\r\n    }\r\n    items(num){\r\n        this.numOfItems = num ;\r\n    }\r\n}\r\n\r\ndecorate(TodoStore,{numOfItems:observable,Listposition:observable,todos:observable,completed:observable,addTodo:action,removeTodo:action,removeAllCompletedTodo:action})\r\n\r\nconst todoStore = new TodoStore()\r\n\r\nexport default todoStore","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'mobx-react';\nimport TodoStore from './stores/TodoStore';\nimport TodoModel from './stores/TodoModel';\n\nReactDOM.render(<Provider  todoStore={TodoStore} todoModel={TodoModel}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}